// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// bacBatchFreq
NumericMatrix bacBatchFreq(NumericMatrix y);
RcppExport SEXP _basim_bacBatchFreq(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(bacBatchFreq(y));
    return rcpp_result_gen;
END_RCPP
}
// bacProb
NumericMatrix bacProb(int n, int bsize, NumericMatrix pmat);
RcppExport SEXP _basim_bacProb(SEXP nSEXP, SEXP bsizeSEXP, SEXP pmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type bsize(bsizeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pmat(pmatSEXP);
    rcpp_result_gen = Rcpp::wrap(bacProb(n, bsize, pmat));
    return rcpp_result_gen;
END_RCPP
}
// bacCumProb
NumericMatrix bacCumProb(NumericMatrix y, int nmax, int nmin, int bsize);
RcppExport SEXP _basim_bacCumProb(SEXP ySEXP, SEXP nmaxSEXP, SEXP nminSEXP, SEXP bsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< int >::type nmin(nminSEXP);
    Rcpp::traits::input_parameter< int >::type bsize(bsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(bacCumProb(y, nmax, nmin, bsize));
    return rcpp_result_gen;
END_RCPP
}
// bacSimonSingle
NumericVector bacSimonSingle(NumericMatrix cumu, int n1, int r1, int n, int r);
RcppExport SEXP _basim_bacSimonSingle(SEXP cumuSEXP, SEXP n1SEXP, SEXP r1SEXP, SEXP nSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type cumu(cumuSEXP);
    Rcpp::traits::input_parameter< int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< int >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(bacSimonSingle(cumu, n1, r1, n, r));
    return rcpp_result_gen;
END_RCPP
}
// bacSimonDesign
NumericMatrix bacSimonDesign(NumericMatrix y0, NumericMatrix y1, int nmax, int nmin, int bsize, double alpha, double beta);
RcppExport SEXP _basim_bacSimonDesign(SEXP y0SEXP, SEXP y1SEXP, SEXP nmaxSEXP, SEXP nminSEXP, SEXP bsizeSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< int >::type nmin(nminSEXP);
    Rcpp::traits::input_parameter< int >::type bsize(bsizeSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(bacSimonDesign(y0, y1, nmax, nmin, bsize, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// bacICC
double bacICC(NumericMatrix ys);
RcppExport SEXP _basim_bacICC(SEXP ysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ys(ysSEXP);
    rcpp_result_gen = Rcpp::wrap(bacICC(ys));
    return rcpp_result_gen;
END_RCPP
}
// baBatches
NumericVector baBatches(int n, int bsize);
RcppExport SEXP _basim_baBatches(SEXP nSEXP, SEXP bsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type bsize(bsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(baBatches(n, bsize));
    return rcpp_result_gen;
END_RCPP
}
// baSaGetVar
double baSaGetVar(NumericVector bsizes, double p, double rho);
RcppExport SEXP _basim_baSaGetVar(SEXP bsizesSEXP, SEXP pSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type bsizes(bsizesSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(baSaGetVar(bsizes, p, rho));
    return rcpp_result_gen;
END_RCPP
}
// baSaAlphaBeta
NumericVector baSaAlphaBeta(NumericVector bsizes, int r, double p0, double p1, double rho0, double rho1);
RcppExport SEXP _basim_baSaAlphaBeta(SEXP bsizesSEXP, SEXP rSEXP, SEXP p0SEXP, SEXP p1SEXP, SEXP rho0SEXP, SEXP rho1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type bsizes(bsizesSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type rho0(rho0SEXP);
    Rcpp::traits::input_parameter< double >::type rho1(rho1SEXP);
    rcpp_result_gen = Rcpp::wrap(baSaAlphaBeta(bsizes, r, p0, p1, rho0, rho1));
    return rcpp_result_gen;
END_RCPP
}
// baSaDesign
NumericVector baSaDesign(int nmin, int bsize, double alpha, double beta, double p0, double p1, double rho0, double rho1);
RcppExport SEXP _basim_baSaDesign(SEXP nminSEXP, SEXP bsizeSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP p0SEXP, SEXP p1SEXP, SEXP rho0SEXP, SEXP rho1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nmin(nminSEXP);
    Rcpp::traits::input_parameter< int >::type bsize(bsizeSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type rho0(rho0SEXP);
    Rcpp::traits::input_parameter< double >::type rho1(rho1SEXP);
    rcpp_result_gen = Rcpp::wrap(baSaDesign(nmin, bsize, alpha, beta, p0, p1, rho0, rho1));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_basim_bacBatchFreq", (DL_FUNC) &_basim_bacBatchFreq, 1},
    {"_basim_bacProb", (DL_FUNC) &_basim_bacProb, 3},
    {"_basim_bacCumProb", (DL_FUNC) &_basim_bacCumProb, 4},
    {"_basim_bacSimonSingle", (DL_FUNC) &_basim_bacSimonSingle, 5},
    {"_basim_bacSimonDesign", (DL_FUNC) &_basim_bacSimonDesign, 7},
    {"_basim_bacICC", (DL_FUNC) &_basim_bacICC, 1},
    {"_basim_baBatches", (DL_FUNC) &_basim_baBatches, 2},
    {"_basim_baSaGetVar", (DL_FUNC) &_basim_baSaGetVar, 3},
    {"_basim_baSaAlphaBeta", (DL_FUNC) &_basim_baSaAlphaBeta, 6},
    {"_basim_baSaDesign", (DL_FUNC) &_basim_baSaDesign, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_basim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
